openapi: 3.0.0
info:
  title: Jobs API
  description: RESTful API for managing job postings and user authentication.
  version: '1.0.0'
servers:
  - url: https://jobscheduler-f996.onrender.com/
    description: Production server
  - url: http://localhost:5000/
    description: Local development server
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Create a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              name: tomy
              password: tomy11
              email: tomy11@gmail.com
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input or user already exists
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: Authenticate user and return a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: tomy11@gmail.com
              password: tomy11
      responses:
        '200':
          description: Login successful, returns JWT token
        '401':
          description: Invalid credentials
  /jobs:
    get:
      tags:
        - Jobs
      summary: Get all jobs
      description: Retrieve all jobs for the authenticated user.
      security:
        - bearer: []
      responses:
        '200':
          description: List of jobs
        '401':
          description: Unauthorized
    post:
      tags:
        - Jobs
      summary: Create a job
      description: Create a new job posting.
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
            example:
              company: wipro
              position: ceo
      responses:
        '201':
          description: Job created successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  /jobs/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The job ID
    get:
      tags:
        - Jobs
      summary: Get a single job
      description: Retrieve a job by its ID.
      security:
        - bearer: []
      responses:
        '200':
          description: Job details
        '404':
          description: Job not found
        '401':
          description: Unauthorized
    patch:
      tags:
        - Jobs
      summary: Update a job
      description: Update an existing job posting.
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJobRequest'
            example:
              company: wipro
              position: cto
              status: interview
      responses:
        '200':
          description: Job updated successfully
        '400':
          description: Invalid input
        '404':
          description: Job not found
        '401':
          description: Unauthorized
    delete:
      tags:
        - Jobs
      summary: Delete a job
      description: Delete a job by its ID.
      security:
        - bearer: []
      responses:
        '200':
          description: Job deleted successfully
        '404':
          description: Job not found
        '401':
          description: Unauthorized
components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - name
        - password
        - email
      properties:
        name:
          type: string
          example: tomy
        password:
          type: string
          example: tomy11
        email:
          type: string
          format: email
          example: tomy11@gmail.com
    LoginRequest:
      type: object
      required:
        - password
        - email
      properties:
        password:
          type: string
          example: tomy11
        email:
          type: string
          format: email
          example: tomy11@gmail.com
    CreateJobRequest:
      type: object
      required:
        - company
        - position
      properties:
        company:
          type: string
          example: wipro
        position:
          type: string
          example: ceo
    UpdateJobRequest:
      type: object
      properties:
        company:
          type: string
          example: wipro
        position:
          type: string
          example: cto
        status:
          type: string
          example: interview
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Auth
    description: User authentication
  - name: Jobs
    description: Job management
